{"version":3,"sources":["assets/css/_settings.styl","node_modules/axis/axis/reset.styl","node_modules/axis/axis/typography.styl","assets/css/master.styl","node_modules/rupture/rupture/index.styl","node_modules/axis/axis/utilities.styl","node_modules/jeet/stylus/jeet/_grid.styl"],"names":[],"mappings":"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","sourcesContent":["// ---------------\n// Axis Settings\n// Check here for updates:\n// https://github.com/jenius/axis/blob/master/axis/settings.styl\n// ---------------\n\n// Font stacks (add your own!)\n$helvetica-neue = \"Helvetica Neue\", HelveticaNeue, Helvetica, Arial, sans-serif\n$helvetica = \"Helvetica Neue\", Helvetica, Arial, sans-serif\n$georgia = Georgia, Cambria, \"Times New Roman\", Times, serif\n$lucidia-grande = \"Lucida Grande\", Tahoma, Verdana, Arial, sans-serif\n$monospace = unquote(\"'Bitstream Vera Sans Mono', Consolas, Courier, monospace\")\n$verdana = Verdana, Geneva, sans-serif\n$times = Times, serif\n\n@font-face {\nfont-family: Avenir;\nsrc: url(\"../fonts/AvenirNextLTPro-Regular.otf\") format(\"opentype\");\n}\n\n@font-face {\nfont-family: Avenir-bold;\nfont-weight: bold;\nsrc: url(\"../fonts/AvenirNextLTPro-Demi.otf\") format(\"opentype\");\n}\n\n// Default font settings\n$font-stack = $times\n$font-size = 16\n$font-color = black\n\n// Colors (via http://clrs.cc - slightly modded)\n$navy     = #001F3F\n$blue     = #E0EFF1\n$aqua     = #7FDBFF\n$teal     = #39CCCC\n$olive    = #3D9970\n$green    = #2ECC40\n$lime     = #01FF70\n$yellow   = #FFDC00\n$orange   = #FF851B\n$red      = #D13F19\n$maroon   = #F3EBE1\n$fuchsia  = #F012BE\n$purple   = #B10DC9\n$white    = #FFFFFF\n$silver   = #F3F3F3\n$gray     = #AAAAAA\n$black    = #000000\n\n// Use as default HTML colors\nnavy    = $navy\nblue    = $blue\naqua    = $aqua\nteal    = $teal\nolive   = $olive\ngreen   = $green\nlime    = $lime\nyellow  = $yellow\norange  = $orange\nred     = $red\nmaroon  = $maroon\nfuchsia = $fuchsia\npurple  = $purple\nwhite   = $white\nsilver  = $silver\ngray    = $gray\nblack   = $black\n\n// Default color\n$default-color = $blue\n\n// Text highlight color\n$highlight-color = $blue\n\n// Custom image base path for axis mixins\n$img-path = '/img/'\n\n// Ligatures\n$ligatures = false","// -----\n// Reset\n// -----\n\n// Global Reset\n// Based on [Eric Meyer's reset](http://meyerweb.com/eric/thoughts/2007/05/01/reset-reloaded/)\n// ported from Nib\n\nglobal-reset()\n  html, body, div, span, applet, object, iframe,\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n  a, abbr, acronym, address, big, cite, code,\n  del, dfn, em, img, ins, kbd, q, s, samp,\n  small, strike, strong, sub, sup, tt, var,\n  dl, dt, dd, ol, ul, li,\n  fieldset, form, label, legend,\n  table, caption, tbody, tfoot, thead, tr, th, td\n    reset-box-model()\n    reset-font()\n  body\n    reset-body()\n  ol, ul\n    list-style: none\n  table\n    reset-table()\n  caption, th, td\n    reset-table-cell()\n  a img\n    border: none\n\nnested-reset()\n  div, span, object, iframe, h1, h2, h3, h4, h5, h6, p,\n  pre, a, abbr, acronym, address, code, del, dfn, em, img,\n  dl, dt, dd, ol, ul, li, fieldset, form, label,\n  legend, caption, tbody, tfoot, thead, tr\n    reset-box-model()\n    reset-font()\n  table\n    reset-table()\n  caption, th, td\n    reset-table-cell()\n  a img\n    border: none\n\nreset-box-model()\n  margin: 0\n  padding: 0\n  border: 0\n  outline: 0\n\nreset-font()\n  font-weight: inherit\n  font-style: inherit\n  font-family: inherit\n  font-size: 100%\n  vertical-align: baseline\n\nreset-body()\n  line-height: 1\n  color: black\n  background: white\n\nreset-table()\n  border-collapse: separate\n  border-spacing: 0\n  vertical-align: middle\n\nreset-table-cell()\n  text-align: left\n  font-weight: normal\n  vertical-align: middle\n\nreset-html5()\n  article, aside, canvas, details, figcaption,\n  figure, footer, header, hgroup, menu, nav,\n  section, summary, main\n    reset-box-model()\n    display: block\n  audio, canvas, video\n    display inline-block\n    *display inline\n    *zoom 1\n  audio:not([controls]),[hidden]\n    display none\n\n// Mixin: Normalize CSS\n// Based on v3.0.1 https://github.com/necolas/normalize.css\n\nnormalize-css()\n  html\n    font-family: sans-serif\n    -ms-text-size-adjust: 100%\n    -webkit-text-size-adjust: 100%\n\n  body\n    margin: 0\n\n  article, aside, details, figcaption, figure, footer, header, hgroup, main, nav, section, summary\n    display: block\n\n  audio, canvas, progress, video\n    display: inline-block\n    vertical-align: baseline\n\n  audio:not([controls])\n    display: none\n    height: 0\n\n  [hidden], template\n    display: none\n\n  a\n    background: transparent\n\n    &:active, &:hover\n      outline: 0\n\n  abbr[title]\n    border-bottom: 1px dotted\n\n  b, strong\n    font-weight: bold\n\n  dfn\n    font-style: italic\n\n  h1\n    font-size: 2em\n    margin: 0.67em 0\n\n  mark\n    background: #ff0\n    color: #000\n\n  small\n    font-size: 80%\n\n  sub, sup\n    font-size: 75%\n    line-height: 0\n    position: relative\n    vertical-align: baseline\n\n  sup\n    top: -0.5em\n\n  sub\n    bottom: -0.25em\n\n  img\n    border: 0\n\n  svg:not(:root)\n    overflow: hidden\n\n  figure\n    margin: 1em 40px\n\n  hr\n    -moz-box-sizing: content-box\n    box-sizing: content-box\n    height: 0\n\n  pre\n    overflow: auto\n\n  code, kbd, pre, samp\n    font-family: monospace, monospace\n    font-size: 1em\n\n  button, input, optgroup, select, textarea\n    color: inherit\n    font: inherit\n    margin: 0\n\n  button\n    overflow: visible\n\n  button, select\n    text-transform: none\n\n  button, html input[type=\"button\"], input[type=\"reset\"], input[type=\"submit\"]\n    -webkit-appearance: button\n    cursor: pointer\n\n  button[disabled], html input[disabled]\n    cursor: default\n\n  button::-moz-focus-inner, input::-moz-focus-inner\n    border: 0\n    padding: 0\n\n  input\n    line-height: normal\n\n  input[type=\"checkbox\"], input[type=\"radio\"]\n    box-sizing: border-box\n    padding: 0\n\n  input[type=\"number\"]::-webkit-inner-spin-button, input[type=\"number\"]::-webkit-outer-spin-button\n    height: auto\n\n  input[type=\"search\"]\n    -webkit-appearance: textfield\n    -moz-box-sizing: content-box\n    -webkit-box-sizing: content-box\n    box-sizing: content-box\n\n  input[type=\"search\"]::-webkit-search-cancel-button, input[type=\"search\"]::-webkit-search-decoration\n    -webkit-appearance: none\n\n  fieldset\n    border: 1px solid #c0c0c0\n    margin: 0 2px\n    padding: 0.35em 0.625em 0.75em\n\n  legend\n    border: 0\n    padding: 0\n\n  textarea\n    overflow: auto\n\n  optgroup\n    font-weight: bold\n\n  table\n    border-collapse: collapse\n    border-spacing: 0\n\n  td, th\n    padding: 0\n\n// Mixin: Fluid Media\n// Makes your img, video, and iframe tags responsive to their parent container.\n\nfluid-media()\n  img,\n  video,\n  iframe\n    max-width: 100%\n    height: auto\n    border: 0\n    -ms-interpolation-mode: bicubic\n    display: block\n\n// Mixin: Border Box HTML\n// Add border box to every element in your project. Used in your project root.\n// http://www.paulirish.com/2012/box-sizing-border-box-ftw/\n\nborder-box-html()\n  html\n    box-sizing: border-box\n\n  *,\n  *:before,\n  *:after\n    box-sizing: inherit\n\n// Mixin: Print Styles\n// Nice clean print styles so you don't have to worry about it.\n\nprint-styles()\n  @media print\n    body\n      width: 100% !important\n      margin: 0 !important\n      padding: 0 !important\n      font-size: 14pt\n      line-height: 1.45\n      font-family: Garamond, \"Times New Roman\", serif\n      color: #000\n      background: none\n\n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6\n      page-break-after: avoid\n      font-family: \"Helvetica\", Arial, sans-serif\n\n    h1\n      font-size: 36pt\n      line-height: 1.25em\n\n    h2\n      font-size: 24pt\n      line-height: 1.25em\n\n    h3\n      font-size: 18pt\n      line-height: 1.25em\n\n    h4,\n    h5,\n    h6\n      font-size: 14pt\n      line-height: 1.25em\n\n    p,\n    h2,\n    h3\n      orphans: 3\n      widows: 3\n\n    code\n      font: 12pt Courier, $monospace\n\n    blockquote\n      margin: 1.2em\n      padding: 1em\n      font-size: 24pt\n      line-height: 1.45833333em\n      font-style: italic\n\n    hr\n      background-color: #ccc\n\n    img\n      float: left\n      margin: 1em 1.5em 1.5em 0\n      max-width: 100% !important\n\n    a img\n        border: none\n\n    a:link,\n    a:visited\n      background: transparent\n      font-weight: 700\n      text-decoration: underline\n      color: #333\n\n    a:link[href^=\"http://\"]:after,\n    a[href^=\"http://\"]:visited:after\n      content: \" (\" attr(href) \") \"\n      font-size: 90%\n\n    abbr[title]:after\n      content: \" (\" attr(title) \")\"\n\n    a[href^=\"http://\"]\n      color: #000\n\n    a[href$=\".jpg\"]:after,\n    a[href$=\".jpeg\"]:after,\n    a[href$=\".gif\"]:after,\n    a[href$=\".png\"]:after\n      content: \" (\" attr(href) \") \"\n      display: none\n\n    a[href^=\"#\"]:after, a[href^=\"javascript:\"]:after\n      content: \"\"\n\n    table\n      margin: 1px\n      text-align: left\n\n    th\n      border-bottom: 1px solid #333\n      font-weight: bold\n\n    td\n      border-bottom: 1px solid #333\n\n    th,\n    td\n      padding: 4px 10px 4px 0\n\n    tfoot\n      font-style: italic\n\n    caption\n      background: #fff\n      margin-bottom: 2em\n      text-align: left\n\n    thead\n      display: table-header-group\n\n    img,\n    tr\n      page-break-inside: avoid\n","// ----------\n// Typography\n// ----------\n\n// Alias: Bold\n// It's just faster to type bold() than font-weight: bold\n\nbold()\n  font-weight: bold\n\n// Alias: Italic\n// It's just faster to type italic() than font-style: italic\n\nitalic()\n  font-style: italic\n\n// Alias: Normal\n// Put the font-weight and style back to normal\n\nnormal()\n  font-weight: normal\n  font-style: normal\n\n// Mixin: Raquo\n//\n// Because technically raquo is not semantic, it's better to add it like this.\n//\n// ex. raquo()\n\nraquo()\n  &:after\n    content: \" \\00BB\"\n\n// Mixin: Font Face\n//\n// Super simple font-face declaration. Just give the name and the folder it\n// lives in. Make sure the font name matches the name of the files. Uses the\n// fontspring syntax:\n// http://www.fontspring.com/blog/the-new-bulletproof-font-face-syntax\n//\n// ex. font-face(proxima-nova, '/fonts')\n\nfont-face($name, $folder, $weight = 'normal', $style = 'normal')\n  @font-face\n    font-family: $name\n    src: url($folder unquote('/') $name unquote('.eot') '?#iefix') format('embedded-opentype'), url($folder unquote('/') $name unquote('.woff')) format('woff'), url($folder unquote('/') $name unquote('.ttf')) format('truetype'), url($folder unquote('/') $name unquote('.eot') unquote('#') $name) format('svg');\n    font-weight: unquote($weight)\n    font-style: unquote($style)\n\n\n// Mixin: Ellipsis\n// Truncate text to the width of its container...\n// ex: ellipsis()\n// ex: ellipsis: 300px\n\nellipsis($width = 100%)\n  white-space: nowrap\n  display: inline-block\n  max-width: $width\n  overflow: hidden\n  text-overflow: ellipsis\n  word-wrap: normal\n\n// Function: Line Height\n//\n// If there is a font-size set on the parent element, adjusts the line height to\n// match that. If not, it uses the base font-size to calculate the line-height.\n\n-line-height()\n  if @font-size\n    line-height: 1.6em\n  else\n    line-height: unit($font-size*1.6, 'px')\n    line-height: 1.6rem\n\n// Mixin: Text Margin\n//\n// Puts nice visually pleasing top and bottom margins on a paragraph of text.\n// Put a font-size on your element to have it adjust accordingly.\n//\n// ex. p\n//       font-size: 18px\n//       text-margin()\n\ntext-margin($size = $font-size)\n  if @font-size\n    margin: .75em 0\n  else\n    margin: unit($font-size*.75, 'px') 0\n\n// Mixin: Paragraph\n//\n// Sets a nice size, line-height, and margins on a paragraph of text. Pass a\n// size in to customize. Toggle margins off if you don't want them.\n//\n// ex. p()\n// ex. p: 18px\n// ex. p: 14px false\n\np($size = 1rem, $margins = true)\n  font-size: $size\n  text-margin() if $margins\n  -line-height()\n  open-type-ligatures() if $ligatures\n\n// Alias: paragraph\nparagraph = p\n\n// Alias: Font Size\n// An alias for 'font-size' with auto-fallback for rem.\n// ex. fs: 16px\n// ex. fs: 1.2rem\n\nfs($size)\n  if (unit($size) == 'rem')\n    font-size: round(unit(($font-size*$size), 'px'))\n    font-size: $size\n  else\n    font-size: $size\n\n// Alias: Uppercase\n// An alias for 'text-transform: uppercase'\n// ex. uppercase()\n\nuppercase()\n  text-transform: uppercase\n\n// Alias: Upcase\nupcase = uppercase\n\n// Alias: Lowercase\n// An alias for 'text-transform: lowercase'\n// ex. lowercase()\n\nlowercase()\n  text-transform: lowercase\n\n// Alias: Downcase\ndowncase = lowercase\n\n// Alias: Reset Case\n// Gets rid of an text transform\n// ex. reset-case()\n\nreset-case()\n  text-transform: none\n\n// Mixin: Small\n//\n// Makes your text smaller and a little lighter. Great on <small /> tags.\n//\n// ex. small()\n\nsmall()\n  font-size: 55%\n  opacity: .6\n  font-weight: normal\n\n// Function: Heading\n// For internal use within headings\n\n-heading($multiplier, $margins = true)\n  font-size: unit(($font-size*$multiplier), 'px')\n  font-size: unit($multiplier, 'rem')\n  text-rendering: optimizelegibility\n  font-weight: bold\n  text-margin() if $margins\n  -line-height()\n  openTypeLigatures() if $ligatures\n\n// Mixin Set: h1, h2, h3, h4, h5, h6\n//\n// These provide nice defaults for headings based off the default font size.\n// The can scale infinitely, and work best when matched to their corresponding\n// html elements. If you'd like to change the base size of a header, just pass\n// it as an option.\n//\n// ex. h3()\n// ex. h3: 3.5\n\nh1($size=2.4)\n  -heading($size)\n\nh2($size=1.8)\n  -heading($size)\n\nh3($size=1.5)\n  -heading($size)\n\nh4($size=1.3)\n  -heading($size)\n\nh5($size=1.0)\n  -heading($size)\n\nh6($size=0.9)\n  -heading($size)\n  upcase()\n\n// Mixin: Link\n//\n// A nice default style for links. Accepts a color and a style. Color can be\n// anything, style can be underline, darken, lighten, or glow, each giving it a\n// different style of interaction when hovered. More suggestions here welcome.\n//\n// ex. link()\n// ex. link: green\n// ex. link: #57777E 'glow'\n\nlink($color = $blue, $style = 'underline')\n  color: $color\n  text-decoration: none\n  transition()\n\n  if $style == 'underline'\n    hover-underline()\n    &:hover\n      color: darken(@color, 15%)\n  else if $style == 'darken'\n    &:hover\n      color: darken(@color, 20%)\n  else if $style == 'lighten'\n    hover-lighten()\n  else if $style == 'glow'\n    &:hover\n      text-shadow: 0 0 7px rgba(@color, .6)\n\n  &:visited\n    opacity: .8\n\n// Mixin: Reset Link\n//\n// Sometimes my link mixin of the browser defaults will give you questionable\n// link defaults that you don't want on certain elements. This guy gets rid of\n// that.\n\n// ex. reset-link()\n\nreset-link()\n  border: none\n  text-decoration: none\n  color: initial\n\n  &:hover\n    border: none\n    text-decoration: none\n    color: initial\n\n  &:visited\n    opacity: 1\n\n// Mixin: Text Selection\n//\n// This guy sets the text select color intelligently based on the\n// highlight-color variable found in the settings file. If you really want, you\n// can pass it a color override too.\n\n// ex. text-selection()\n\ntext-selection($color = $highlight-color, $text-color = null)\n\n  $text-color = (light($color) ? white : #494949) unless $text-color\n\n  &::-moz-selection\n    background: $color\n    color: $text-color\n\n  &::selection\n    background: $color\n    color: $text-color\n\n// Mixin: Ul\n//\n// A nice default for list styles. More or less the same as browser defaults,\n// scales nicely. You can pass it any style that list-style-type would normally\n// take. Defaults to disc. Use this on a ul element por favor.\n//\n// ex. ul()\n// ex. ul: 'square'\n\nul($style = 'disc')\n  margin: 5px 15px\n  margin: 0.32rem 0.94rem\n  padding-left: 1rem\n\n  li\n    list-style-type: unquote($style)\n    padding: 2px 0\n    padding: 0.125rem\n\n// Mixin: Ol\n//\n// A nice default for list styles. More or less the same as browser defaults,\n// scales nicely. You can pass it any style that list-style-type would normally\n// take. Defaults to decimal. Use this on a ol element por favor.\n//\n// ex. ol()\n// ex. ol: 'upper-roman'\n\nol($style = 'decimal')\n  margin: 5px 18px\n  margin: 0.32rem 1.125rem\n  padding-left: 1rem\n\n  li\n    list-style-type: unquote($style)\n    padding: 2px 0\n    padding: 0.125rem\n\n// Mixin: Inline List\n//\n// For when you need your list to be horizontal. Pass it the spacing you want\n// between list elements, whatever units you'd like. Defaults to 20px.\n//\n// ex. inline-list()\n// ex. inline-list: 15px\n\ninline-list($spacing = 20px)\n  group()\n  margin: 0\n  padding: 0\n\n  li\n    float: left\n    margin-right: $spacing\n    list-style-type: none\n\n  li:last-child\n    margin-right: 0\n\n// Mixin: Reset List\n//\n// If you're tired of all the list shenanigans and want to get rid of them for\n// this special list you're working on, this is your guy. Resets the margins,\n// padding, and style.\n//\n// ex. reset-list()\n\nreset-list()\n  margin: 0\n  padding: 0\n\n  li\n    float: none\n    list-style-type: none\n    padding: 0\n    margin: 0\n\n// Mixin: Blockquote\n//\n// Nice styles for a blockquote, and even puts a nice hyphen in before your\n// citation. Use with a <p> and <cite>, <footer>, or <figcaption> inside for\n// best results. Pass a color or 'none' to set the left border.\n//\n// ex. blockquote()\n\nblockquote($color = $blue)\n  border-left: 4px solid $color\n  margin: 1em 0\n  padding-left: 1.5em\n  group()\n\n  > p\n    font-weight: 300\n    font-size: 127%\n    font-size: 1.27rem\n    line-height: 127%\n    line-height: 1.27rem\n    margin-top: 0\n\n  > cite, > footer, > figcaption\n    color: #888888\n    &:before\n      content: '\\2014'\n\n// Alias: blockquo\nblockquo = blockquote\n\n// Hyphenation\n//\n// Hyphenation is the better word-break. It’s locale aware, and inserts the\n// hyphen character at the correct place, when breaking the words. This is\n// especially important in responsive designs. It will save you from a lot of\n// ragged lines. And, no need anymore for clunky & slow Javascript hyphenation\n// fallbacks. Taken from http://www.newnet-soft.com/blog/csstypography\n//\n// ex. hyphenation()\n\nhyphenation()\n    -ms-word-break: break-all\n    word-break:     break-all\n    word-break:     break-word // webkit\n    hyphens: auto // none, auto, <number>\n    -webkit-hyphenate-before: 2\n    -webkit-hyphenate-after:  3\n    hyphenate-lines:          3\n\n// Mixin: Shadow Stroke\n//\n// Creates a text outline using text-shadow. Ported from nib.\n// Takes a color.\n//\n// ex: shadow-stroke()\n// ex: sahdow-stroke(red)\n\nshadow-stroke($color = $blue)\n  text-shadow: -1px -1px 0 $color, 1px -1px 0 $color, -1px 1px 0 $color, 1px 1px 0 $color\n\n// Additive Mixin: Base\n//\n// WARNING: Creates classes in your css and styles them - not to be used inside\n// an element.\n//\n// This is an essential mixin. You want this on your page. Sets your font stack,\n// size, and colors based on the settings file and makes sure that your text is\n// a great looking as possible. You can override any of the params, but there is\n// really no reason to.\n//\n// ex. base()\n\nbase($fonts = $font-stack, $size = $font-size, $color = $font-color)\n  html\n    font-size: unit($size, 'px')\n    font-size: unit(($size/16)*100, \"%\")\n\n  body\n    font-family: $fonts\n    color: $color\n    -webkit-font-smoothing: antialiased\n    -webkit-text-size-adjust: 100%\n    -ms-text-size-adjust: 100%\n    font-size-adjust: auto\n\n// Additive Mixin: Headers\n//\n// WARNING: Creates classes in your css and styles them - not to be used inside\n// an element.\n//\n// Adds roots' wonderful scaling header styles to your <hx> tags.\n//\n// ex. headers()\n\nheaders()\n  h1\n    h1()\n\n  h2\n    h2()\n\n  h3\n    h3()\n\n  h4\n    h4()\n\n  h5\n    h5()\n\n  h6\n    h6()\n\n// Additive Mixin: Lists\n//\n// WARNING: Creates classes in your css and styles them - not to be used inside\n// an element.\n//\n// Adds roots' styles to ul and ols.\n//\n// ex. lists()\n\nlists()\n  ul\n    ul()\n  ol\n    ol()\n\n// Additive Mixin: Bold-Italic\n//\n// WARNING: Creates classes in your css and styles them - not to be used inside\n// an element.\n//\n// Adds bold and italic styles to the right tags if you did a global reset.\n//\n// ex. bold-italic()\n\nbold-italic()\n  b\n    bold()\n  i\n    italic()\n  strong\n    bold()\n  em\n    italic()\n\n// Additive Mixin: Typography\n//\n// WARNING: Creates classes in your css and styles them - not to be used inside\n// an element.\n//\n// Adds roots' styles to bold and italic elements, headers, paragrapgs, small\n// text, links, lists, and blockquotes. Got all your basic elements covered.\n//\n// ex. typography()\n\ntypography()\n  bold-italic()\n  headers()\n  lists()\n  text-selection()\n\n  p\n    paragraph()\n\n  small\n    small()\n\n  a\n    link()\n\n  blockquote\n    blockquo()\n\n  .hyphenation\n    hyphenation()\n","@import '_settings'\n@import 'jeet'\n\nnormalize-css()\nbase()\n// edit() \n\n// BODY SETTINGS\ntext-align center\nbody\n\t*\n\t\tbox-sizing: border-box\n\t\tfont-size 16px\n\t\t+below(40em)\n\t\t\tfont-size 14px\n\th1\n\t\tfont-family Times\n\t\tfont-size 3.5em\n\t\tline-height 1.1em\n\t\t// line-height 2em\n\t\tmargin 0px\n\t\tletter-spacing .1\n\t\ttext-align center !important;\n\t\t\n\t\t\n\th2\n\t\tfont-size 2.5em\n\t\tmargin-top 0px\n\th3\n\t\tfont-family 'Avenir-bold'\n\t\tfont-size 1em\n\t\tline-height 1.8em\n\t\tmargin-top 0\n\timg\n\t\tmax-width 100%\n\t\t\n\tp, li\n\t\tfont-family 'Avenir'\n\t\tline-height 1.8em\n\t\ttext-align left\n\tp\n\t\t// text-align center\n\tul \n\t\tlist-style none\n\t\tpadding-left 1em\n\t\tmargin-top 0px\n\t\tli\n\t\t\tline-height 1.8em\n\t.hidden\n\t\tdisplay none\n\t.logo\n\t\tposition fixed\n\t\twidth 6em\n\t\tright 50%\n\t\tmargin-right -3em\n\t\ttop 2em\n\t.button-fixed\n\t\tposition fixed\n\t\tfont-family Avenir-bold\n\t\ttext-decoration underline\n\t\ttransition all .2s\n\t\t&:hover\n\t\t\tbackground-color black\n\t\t\tcolor white\n\t\t\ttext-decoration none\n\t\t&.contato-email\n\t\t\tleft 1em\n\t\t\ttop 50%\n\t\t\ttransform rotate(-90deg)\n\t\t&.facebook\n\t\t\tright 1em\n\t\t\ttop 50%\n\t\t\ttransform rotate(-90deg)\n\t\t&.button-lancamento\t\n\t\t\tright 50%\n\t\t\ttext-align center\n\t\t\tmargin-right -9em\n\t\t\tbottom 2em\n\n\t\t\n\t\t\t\n\t.section-inner\n\t\tcenter(40em)\n\t\tpadding 13em 0em\n\t\t&.principios\n\t\t\tbackground-color white\n\t\t\t\n\t\t\tspan\n\t\t\t\tcol(3/9)\n\t\t\t\ttext-align center !important\n\t\t\t\tp\n\t\t\t\t\ttext-align center\n\t\t\t\th3\n\t\t\t\t\tmargin-top 1em\n\t\t\t\t+below(40em)\n\t\t\t\t\tstack()\n\t\t\t\t\twidth 17em\n\t\t\t\t\tmargin-bottom 2em\n\t\t\t\t\tborder-bottom 1px solid $silver\n\t\t\th1\n\t\t\t\tcol(1/1)\n\t\t\t\tmargin-bottom 1em\n\t\t\t\tmargin-top 1px\n\t\t\n\t.section-full\n\t\t+below(40em)\n\t\t\th1, h2, p\n\t\t\t\ttext-align center !important\n\t\t&.gypso\n\t\t\tbackground-color $blue\n\t\t&.pistache\n\t\t\tbackground-color #FEF1F1\n\t\t&.progress\n\t\t\ttext-align center\n\t\t\tcenter(60em)\n\t\t\tpadding 5em\n\t\t\timg\n\t\t\t\tdisplay inline-block\n\t\t\t\t\n\t\t\t\tpadding 2em\n\t\t\t\t\n\t\t.section-full-wrapper\n\t\t\tcenter(45em)\n\t\t\tpadding 13em 0\n\t\t\th2\n\t\t\t\tmargin-top -.3em\n\t\t\t+below(40em)\n\t\t\t\tpadding 6em 0\n\t\t.span6\n\t\t\tpadding 0\n\t\t\tcol(6/12, gutter: 8em)\n\t\t\timg\n\t\t\t\tmix-blend-mode multiply\n\t\t\t+below(40em)\n\t\t\t\tstack()\n\t\t\t\tpadding 2em\n\t\t.span4\n\t\t\tcol(4/12, gutter: 5em)\n\t\t.span8\n\t\t\tcol(8/12, gutter: 5em)\t\n\t\t\t\t\n\t\t&.hero\n\t\t\tbackground-image url('../img/fundo-hero.jpg')\n\t\t\tbackground-size cover\n\t\t\theight 50em\n\t\t\th1, h2\n\t\t\t\talign(both)\n\t\t\t\ttext-align center\n\t\t\t\twidth 40%\n\t\t\t\t+below(40em)\n\t\t\t\t\twidth 80%\n\t\t\th3 \n\t\t\t\tcol(1/1)\n\t\t\tpadding 0px\n\n\n\n// //SIGNUP \n.signup-contato\n\tposition fixed\n\tz-index 3\n\twidth 100%\n\theight 100%\n\tbackground-color $blue\n\topacity 1\n\t.signup-inner\n\t\tcenter(30em)\n\t\talign(both)\n\t\ttext-align center\n\t\t// position relative\n\t\t// width 30em\n\t\t// margin 3em auto\n\t\t.fechar\n\t\t\tposition absolute\n\t\t\ttop 1em\n\t\t\tright -10em\t\n\t\t\t+below(40em)\n\t\t\t\tposition absolute\n\t\t\t\ttop -2em\n\t\t\t\tright 50%\n\t\t\t\tmargin-right -1em\n\n\th2, p\n\t\tmargin 2rem 0rem\t\n\t\ttext-align center\n\t\t\n\tinput\n\t\tborder 0px solid white !important\n\t\t// border-bottom 3px solid black !important\n\t\tcolor black\n\t\t// background-color rgba(0,0,0,0)\n\t\tpadding 0px !important\n\t\theight 4em\n\t\tmargin 1em 0em\n\t\tfont-family Avenir-bold\n\tform\n\t\tmargin 0px !important\n\t\tpadding 0px !important\n\t\tmargin-top 1em !important\n\t#mc_embed_signup\n\t\tbackground-color rgba(0,0,0,0)\n\t\tpadding 0\n\t\tmargin 0\n\t\tfont-family Avenir !important\n\t\tinput\n\t\t\theight 4em\n\t\t\t\n\t\t.button\n\t\t\tborder 3px solid black !important\n\t\t\twidth 96%\n\t\t\tbackground-color rgba(0,0,0,0)\n\t\t\tborder-radius 0px\n\t\t\tcolor black\n\t\t\ttransition all .2s\n\t\t\t&:hover\n\t\t\t\tbackground-color black\n\t\t\t\tcolor white\n\t\n\t\t\n\n\n\t\t\n\t\t\n\n\n\t\t\t\n\n","base-font-size ?= 16px\nrasterise-media-queries ?= false\n\nrupture = {\n  rasterise-media-queries: rasterise-media-queries\n  mobile-cutoff: 400px\n  desktop-cutoff: 1050px\n  hd-cutoff: 1800px\n  enable-em-breakpoints: false\n  base-font-size: base-font-size\n  anti-overlap: false\n  density-queries: 'dppx' 'webkit' 'moz' 'dpi'\n  retina-density: 1.5\n  use-device-width: false\n}\nrupture.scale = 0 (rupture.mobile-cutoff) 600px 800px (rupture.desktop-cutoff) (rupture.hd-cutoff)\nrupture.scale-names = 'xs' 's' 'm' 'l' 'xl' 'hd'\n\n-is-string(val)\n  if typeof(val) is not 'unit'\n    if val is a 'string' or val is a 'ident'\n      true\n    else\n      false\n  else\n    false\n\n-get-scale-number(scale-name)\n  for list-item, i in rupture.scale-names\n    if list-item is scale-name\n      return i + 1\n  return false\n\n-convert-to(to-unit, value, context = rupture.base-font-size)\n  from-unit = unit(value)\n  return value if to-unit is from-unit\n  if to-unit in ('em' 'rem')\n    return value if from-unit in ('em' 'rem')\n    return unit((value / context), to-unit)\n  if to-unit is 'px'\n    return unit((value * context), 'px')\n\n-on-scale(n)\n  return unit(n) is ''\n\n-larger-than-scale(n)\n  return (n > (length(rupture.scale) - 1)) and -on-scale(n)\n\n-is-zero(n)\n  return n is 0\n\n-overlap-shift(anti-overlap, n)\n  shift-unit = unit(n)\n  anti-overlap = 0px unless anti-overlap\n  anti-overlap = 1px if anti-overlap is true\n  if length(anti-overlap) is 1\n    return -convert-to(shift-unit, anti-overlap)\n  for val in anti-overlap\n    return val if unit(val) is shift-unit\n\n-adjust-overlap(anti-overlap, n, side = 'min')\n  -shift = -overlap-shift(anti-overlap, n)\n  if (side is 'min' and -shift > 0) or (side is 'max' and -shift < 0)\n    n = n + -shift\n  return n\n\n-is-positive(n)\n  return n >= 0\n\n-density-queries(density)\n  if typeof(density) is not 'unit'\n    if not -is-string(density)\n      density = '%s' % density\n  density = rupture.retina-density if density is 'retina'\n  queries = ()\n  for query in rupture.density-queries\n    if query is 'webkit'\n      push(queries, '(-webkit-min-device-pixel-ratio: %s)' % (density))\n    else if query is 'moz'\n      push(queries, '(min--moz-device-pixel-ratio: %s)' % (density))\n    else if query is 'o'\n      push(queries, '(-o-min-device-pixel-ratio: %s/1)' % (density))\n    else if query is 'ratio'\n      push(queries, '(min-device-pixel-ratio: %s)' % (density))\n    else if query is 'dpi'\n      if -is-string(density)\n        density=convert(density)\n      push(queries, '(min-resolution: %sdpi)' % (round(density * 96, 1)))\n    else if query is 'dppx'\n      push(queries, '(min-resolution: %sdppx)' % (density))\n  return queries\n\ncreate-fallback-class(selected, class)\n  /{'' + class + ' ' + selected}\n    {block}\n\n// +between(min, max)\n// usage (scale can be mixed with custom values):\n//   - +between(1, 3) scale:scale\n//   - +between(0, 3) 0 width:scale\n//   - +between(200px, 500px) custom:custom\n//   - +between(0, 300px) 0 width:custom\n//   - +between(1, 300px) scale:custom\n//   - +between(200px, 4) custom:scale\n\nbetween(min, max, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  selected = selector()\n\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  if -is-string(min)\n    min = -get-scale-number(min)\n  if -is-string(max)\n    max = -get-scale-number(max)\n\n  -min = rupture.scale[min - 1] unless -is-zero(min) or (not -on-scale(min))\n  -max = rupture.scale[max] unless not -on-scale(max)\n  -min ?= min\n  -max ?= max\n\n  if (rupture.rasterise-media-queries)\n    if not (density or -max or orientation)\n      {block}\n  else\n    condition = 'only screen'\n    use-device-width = use-device-width ? 'device-' : ''\n    unless -min is 0\n      -min = -convert-to('em', -min) if rupture.enable-em-breakpoints\n      -min = -adjust-overlap(anti-overlap, -min, side: 'min')\n      condition = condition + ' and (min-' + use-device-width + 'width: %s)' % (-min)\n    unless -larger-than-scale(max)\n      -max = -convert-to('em', -max) if rupture.enable-em-breakpoints\n      -max = -adjust-overlap(anti-overlap, -max, side: 'max')\n      condition = condition + ' and (max-' + use-device-width + 'width: %s)' % (-max)\n    if orientation\n      condition = condition + ' and (orientation: %s)' % (orientation)\n    if density\n      conditions = ()\n      for query in -density-queries(density)\n        push(conditions, condition + ' and %s' % (query))\n      condition = join(', ', conditions)\n    @media condition\n      {block}\n  if fallback-class\n    +create-fallback-class(selected, fallback-class)\n      {block}\n\nat(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(scale-point, scale-point, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nfrom-width(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(scale-point, length(rupture.scale), anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nabove = from-width\n\nto-width(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(1, scale-point, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nbelow = to-width\n\nmobile(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +below(rupture.mobile-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\ntablet(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(rupture.mobile-cutoff, rupture.desktop-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\ndesktop(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +above(rupture.desktop-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nhd(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +above(rupture.hd-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\ndensity(density, orientation = null, fallback-class = null)\n  selected = selector()\n  if not (rupture.rasterise-media-queries)\n    conditions = ()\n    for query in -density-queries(density)\n      condition = 'only screen and %s' % (query)\n      if orientation\n        condition = condition + ' and (orientation: %s)' % (orientation)\n      push(conditions, condition)\n    condition = join(', ', conditions)\n    @media condition\n      {block}\n    if fallback-class\n      +create-fallback-class(selected, fallback-class)\n        {block}\n\npixel-ratio = density\n\nretina(orientation = null, fallback-class = null)\n  +density('retina', orientation, fallback-class)\n    {block}\n\nlandscape(density = null, fallback-class = null)\n  selected = selector()\n  if not (rupture.rasterise-media-queries)\n    if -is-string(density)\n      density = convert(density)\n    if density\n      +pixel-ratio(density, orientation: landscape, fallback-class)\n        {block}\n    else\n      @media only screen and (orientation: landscape)\n        {block}\n      if fallback-class\n        +create-fallback-class(selected, fallback-class)\n          {block}\n\nportrait(density = null, fallback-class = null)\n  selected = selector()\n  if not (rupture.rasterise-media-queries)\n    if -is-string(density)\n      density = convert(density)\n    if density\n      +pixel-ratio(density, orientation: portrait, fallback-class)\n        {block}\n    else\n      @media only screen and (orientation: portrait)\n        {block}\n      if fallback-class\n        +create-fallback-class(selected, fallback-class)\n          {block}\n","// ---------\n// Utilities\n// ---------\n\n// Alias: No Select\n// You can't highlight this.\n\nno-select()\n  -webkit-touch-callout: none\n  user-select: none\n\n// Alias: B\n// Border, but quicker and with an intelligent default.\n\nb()\n  arguments = unquote('1px solid') unless arguments\n  border: arguments\n\n// Alias: Transition\n//\n// Transition with an intelligent default.\n//\n// ex. transition()\n// ex. transition: color 1s ease\n// ex. transition(color 1s ease, background 2.4s linear)\n\ntransition()\n  arguments = unquote('all .3s ease') unless arguments\n  transition: arguments\n\n// Alias: Border Box\n// A quicker way to specify border-box sizing.\n\nborder-box()\n  box-sizing: border-box\n\n// Alias: Opentype ligatures\n//\n// The vast majority of fonts contain lowercase and uppercase alphabets,\n// numerals, punctuation and accents. Many professionally-designed fonts\n// also contain ligatures, alternative characters, smallcaps, different kinds of\n// numbers, and sometimes much more besides. This enables it.\n//\n// Source: http://www.newnet-soft.com/blog/csstypography\n// Additional: http://blog.fontdeck.com/post/15777165734/opentype-1\n\nopen-type-ligatures()\n  font-feature-settings: \"liga\", \"dlig\"\n\n// Mixin: Rounded\n//\n// Unless you are working with a ridiculously large element, this will round the\n// corners as much as css will allow. Even in IE.\n//\n// ex. rounded()\n\nrounded()\n  border-radius: 999px\n\n// Mixin: Triangle\n//\n// One of my favorites. Makes a little css triangle for you. Pass it a direction\n// (up, down, left, right), size (in pixels), and a color.\n//\n// ex. triangle()\n// ex. triangle: 'down' 15px blue\n\ntriangle($direction = 'up', $size = 10px, $color = #000)\n  width: 0\n  height: 0\n  if $direction == 'up'\n    border-left: $size solid transparent\n    border-right: $size solid transparent\n    border-bottom: $size solid $color\n  else if $direction == 'down'\n    border-left: $size solid transparent\n    border-right: $size solid transparent\n    border-top: $size solid $color\n  else if $direction == 'left'\n    border-top: $size solid transparent\n    border-bottom: $size solid transparent\n    border-right: $size solid $color\n  else if $direction == 'right'\n    border-top: $size solid transparent\n    border-bottom: $size solid transparent\n    border-left: $size solid $color\n\n// Mixin: Debug\n//\n// Debugging tool - adds a border to the current element, its children,\n// grandchildren, etc so you can see what's up – great for precise layout\n// tweaks.  It will also add flags if you made mistakes like put in inline\n// styles, forgot an alt on an image, left the alt blank, etc. Not to be used\n// in production, obviously.\n//\n// via dbox: http://codepen.io/dbox/pen/GJZzYo?editors=110\n\ndebug()\n  border 1px solid MediumPurple\n  > *\n    border 1px solid DarkKhaki\n  > * > *\n    border 1px solid MediumTurquoise\n  > * > * > *\n    border 1px solid LightSlateGray\n  > * > * > * > *\n    border 1px solid LightBlue\n  > * > * > * > * > *\n    border 1px solid MediumSlateBlue\n  > * > * > * > * > * > *\n    border 1px solid DeepSkyBlue\n  > * > * > * > * > * > * > *\n    border 1px solid DarkSeaGreen\n\n  img\n    border: 1px solid #f00\n    -webkit-filter: hue-rotate(330deg) contrast(.75) saturate(6)\n    filter: hue-rotate(330deg) contrast(.75) saturate(6)\n\n  img[alt]\n    border: 1px solid LimeGreen\n    -webkit-filter: none\n    filter: none\n\n  img[alt=\"\"]\n    border: 1px solid gold\n    -webkit-filter: contrast(1) saturate(2)\n    filter: contrast(1) saturate(2)\n\n  a\n    background: rgba(#f00, .1)\n    border: 1px solid #f00\n\n  a[title]\n    background: none\n    border-color: LimeGreen\n\n  style\n    border: block\n\n  [style], style, [class=\"\"], [id=\"\"], a[href=\"#\"]\n    background: rgba(yellow, .2)\n    border: 1px solid gold\n\n// Block Mixin: Quantity Queries\n//\n// Set rules for a selector based on a specific sibling count.\n// via: https://github.com/pascalduez/postcss-quantity-queries\n//\n// ex. +quantity-at-least(6)\n// ex. +quantity-at-most(12, div)\n// ex. +quantity-between(0, 8, span)\n// ex. +quantity-exactly(5)\n\nquantity-at-least($count = 4, $selector = li)\n  & > {$selector}:nth-last-child(n+{$count})\n  & > {$selector}:nth-last-child(n+{$count}) ~ {$selector}\n    {block}\n\nquantity-at-most($count = 4, $selector = li)\n  & > {$selector}:nth-last-child(-n+{$count}):first-child\n  & > {$selector}:nth-last-child(-n+{$count}):first-child ~ {$selector}\n    {block}\n\nquantity-between($start = 0, $end = 10, $selector = li)\n  & > {$selector}:nth-last-child(n+{$start}):nth-last-child(-n+{$end}):first-child\n  & > {$selector}:nth-last-child(n+{$start}):nth-last-child(-n+{$end}):first-child ~ {$selector}\n    {block}\n\nquantity-exactly($count = 4, $selector = li)\n  & > {$selector}:nth-last-child({$count}):first-child\n  & > {$selector}:nth-last-child({$count}):first-child ~ {$selector}\n    {block}\n\n// Function: Rem Calculator\n//\n// Calculates and returns the rem value based on px input. Default base font\n// size is 16px, but can be changed with base-font-size.\n//\n// ex       : rem(30px) or rem(30)\n// returns  : 1.875rem\n\nrem($value)\n  $base-font-size ?= 16px\n  $type = unit($value)\n  if $type == px\n    return unit($value / $base-font-size, 'rem')\n  else\n    return unit($value, $type)\n\n// Custom animation timing functions, ported from bourbon\n// https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/addons/_timing-functions.scss\n\n// ease-in\n$ease-in-quad =      cubic-bezier(0.550,  0.085, 0.680, 0.530)\n$ease-in-cubic =     cubic-bezier(0.550,  0.055, 0.675, 0.190)\n$ease-in-quart =     cubic-bezier(0.895,  0.030, 0.685, 0.220)\n$ease-in-quint =     cubic-bezier(0.755,  0.050, 0.855, 0.060)\n$ease-in-sine =      cubic-bezier(0.470,  0.000, 0.745, 0.715)\n$ease-in-expo =      cubic-bezier(0.950,  0.050, 0.795, 0.035)\n$ease-in-circ =      cubic-bezier(0.600,  0.040, 0.980, 0.335)\n$ease-in-back =      cubic-bezier(0.600, -0.280, 0.735, 0.045)\n$ease-in-swift =     cubic-bezier(0.900,  0.000, 0.450, 1.000)\n\n// ease-out\n$ease-out-quad =     cubic-bezier(0.250,  0.460, 0.450, 0.940)\n$ease-out-cubic =    cubic-bezier(0.215,  0.610, 0.355, 1.000)\n$ease-out-quart =    cubic-bezier(0.165,  0.840, 0.440, 1.000)\n$ease-out-quint =    cubic-bezier(0.230,  1.000, 0.320, 1.000)\n$ease-out-sine =     cubic-bezier(0.390,  0.575, 0.565, 1.000)\n$ease-out-expo =     cubic-bezier(0.190,  1.000, 0.220, 1.000)\n$ease-out-circ =     cubic-bezier(0.075,  0.820, 0.165, 1.000)\n$ease-out-back =     cubic-bezier(0.175,  0.885, 0.320, 1.275)\n$ease-out-swift =    cubic-bezier(0.550,  0.000, 0.100, 1.000)\n\n// ease-in-out\n$ease-in-out-quad =  cubic-bezier(0.455,  0.030, 0.515, 0.955)\n$ease-in-out-cubic = cubic-bezier(0.645,  0.045, 0.355, 1.000)\n$ease-in-out-quart = cubic-bezier(0.770,  0.000, 0.175, 1.000)\n$ease-in-out-quint = cubic-bezier(0.860,  0.000, 0.070, 1.000)\n$ease-in-out-sine =  cubic-bezier(0.445,  0.050, 0.550, 0.950)\n$ease-in-out-expo =  cubic-bezier(1.000,  0.000, 0.000, 1.000)\n$ease-in-out-circ =  cubic-bezier(0.785,  0.135, 0.150, 0.860)\n$ease-in-out-back =  cubic-bezier(0.680, -0.550, 0.265, 1.550)\n$ease-in-out-swift = cubic-bezier(0.900,  0.000, 0.100, 1.000)\n","/**\n * Style an element as a column with a gutter.\n * @param {number} [ratios=1] - A width relative to its container as a fraction.\n * @param {number} [offset=0] - A offset specified as a fraction (see ratios).\n * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.\n * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.\n * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.\n */\ncolumn(ratios = 1, offset = 0, cycle = 0, uncycle = 0, gutter = jeet.gutter)\n  side = jeet-get-layout-direction()\n  opposite-side = opposite-position(side)\n  column-widths = jeet-get-column(ratios, gutter)\n  margin-last = 0\n  margin-l = margin-last\n  margin-r = column-widths[1]\n\n  unless offset == 0\n    if offset < 0\n      offset *= -1\n      offset = jeet-get-column(offset, column-widths[1])[0]\n      margin-r = margin-last = offset + column-widths[1] * 2\n    else\n      offset = jeet-get-column(offset, column-widths[1])[0]\n      margin-l = offset + column-widths[1]\n\n  cf()\n  float: side\n  clear: none\n  text-align: inherit\n  width: (column-widths[0])%\n  margin-{side}: (margin-l)%\n  margin-{opposite-side}: (margin-r)%\n\n  if uncycle != 0\n    &:nth-child({uncycle}n)\n      margin-{opposite-side}: (margin-r)%\n      float: side\n    &:nth-child({uncycle}n+1)\n      clear: none\n\n  if cycle != 0\n    &:nth-child({cycle}n)\n      margin-{opposite-side}: (margin-last)%\n      float: opposite-side\n    &:nth-child({cycle}n+1)\n      clear: both\n   else\n    &:last-child\n      margin-{opposite-side}: (margin-last)%\n\n/**\n * An alias for the column mixin.\n */\ncol = column\n\n/**\n * Get the width of a column and nothing else.\n * @param {number} [ratios=1] - A width relative to its container as a fraction.\n * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.\n */\ncolumn-width(ratios = 1, gutter = jeet.gutter)\n  return jeet-get-column(ratios, gutter)[0] + '%'\n\n/**\n * An alias for the column-width function.\n */\ncw = column-width\n\n/**\n * Get the gutter size of a column and nothing else.\n * @param {number} [ratios=1] - A width relative to its container as a fraction.\n * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.\n */\ncolumn-gutter(ratios = 1, gutter = jeet.gutter)\n  return jeet-get-column(ratios, gutter)[1] + '%'\n\n/**\n * An alias for the column-gutter function.\n */\ncg = column-gutter\n\n/**\n * Style an element as a column without any gutters for a seamless row.\n * @param {number} [ratios=1] - A width relative to its container as a fraction.\n * @param {number} [offset=0] - A offset specified as a fraction (see ratios).\n * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.\n * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.\n */\nspan(ratio = 1, offset = 0, cycle = 0, uncycle = 0)\n  side = jeet-get-layout-direction()\n  opposite-side = opposite-position(side)\n  span-width = jeet-get-span(ratio)\n  margin-r = 0\n  margin-l = margin-r\n\n  unless offset == 0\n    if offset < 0\n      offset *= -1\n      margin-r = jeet-get-span(offset)\n    else\n      margin-l = jeet-get-span(offset)\n\n  cf()\n  float: side\n  clear: none\n  text-align: inherit\n  width: (span-width)%\n  margin-{side}: (margin-l)%\n  margin-{opposite-side}: (margin-r)%\n\n  if cycle != 0\n    &:nth-child({cycle}n)\n      float: opposite-side\n    &:nth-child({cycle}n + 1)\n      clear: both\n\n  if uncycle != 0\n    &:nth-child({uncycle}n)\n      float: side\n    &:nth-child({uncycle}n + 1)\n      clear: none\n\n/**\n * Reorder columns without altering the HTML.\n * @param {number} [ratios=0] - Specify how far along you want the element to move.\n * @param {string} [col-or-span=column] - Specify whether the element has a gutter or not.\n * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.\n */\nshift(ratios = 0, col-or-span = column, gutter = jeet.gutter)\n  translate = ''\n  side = jeet-get-layout-direction()\n\n  if side == right\n    ratios = jeet-replace-nth(ratios, 0, ratios[0] * -1)\n\n  if col-or-span == column or col-or-span == col or col-or-span == c\n    column-widths = jeet-get-column(ratios, gutter)\n    translate = column-widths[0] + column-widths[1]\n  else\n    translate = jeet-get-span(ratios)\n\n  position: relative\n  left: (translate)%\n\n/**\n * Reset an element that has had shift() applied to it.\n */\nunshift()\n  position: static\n  left: 0\n\n/**\n * View the grid and its layers for easy debugging.\n * @param {string} [color=black] - The background tint applied.\n * @param {boolean} [important=false] - Whether to apply the style as !important.\n */\nedit(color = black, important = false)\n  if important\n    *\n      background: rgba(color, 5%) !important\n  else\n    *\n      background: rgba(color, 5%)\n\n/**\n *  Alias for edit().\n */\ndebug = edit\n\n/**\n * Horizontally center an element.\n * @param {number} [max-width=jeet.max-width] - The max width the element can be.\n * @param {number} [pad=0] - Specify the element's left and right padding.\n */\ncenter(max-width = jeet.max-width, pad = 0)\n  cf()\n  width: auto\n  max-width: max-width\n  float: none\n  display: unquote('block')\n  margin-right: auto\n  margin-left: auto\n  padding-left: pad\n  padding-right: pad\n\n/**\n * Uncenter an element.\n */\nuncenter()\n  max-width: none\n  margin-right: 0\n  margin-left: 0\n  padding-left: 0\n  padding-right: 0\n\n/**\n * Stack an element so that nothing is either side of it.\n * @param {number} [pad=0] - Specify the element's left and right padding.\n * @param {bollean/string} [align=false] - Specify the text align for the element.\n */\nstack(pad = 0, align = false)\n  side = jeet-get-layout-direction()\n  opposite-side = opposite-position(side)\n\n  display: unquote('block')\n  clear: both\n  float: none\n  width: 100%\n  margin-left: auto\n  margin-right: auto\n\n  &:first-child\n    margin-{side}: auto\n\n  &:last-child\n    margin-{opposite-side}: auto\n\n  if pad != 0\n    padding-left: pad\n    padding-right: pad\n\n  if (align is not false)\n    if (align == center) or (align == c)\n      text-align: center\n    if (align == left) or (align == l)\n      text-align: left\n    if (align == right) or (align == r)\n      text-align: right\n\n/**\n * Unstack an element.\n */\nunstack()\n  side = jeet-get-layout-direction()\n  opposite-side = opposite-position(side)\n\n  text-align: side\n  display: inline\n  clear: none\n  width: auto\n  margin-left: 0\n  margin-right: 0\n\n  &:first-child\n    margin-{side}: 0\n\n  &:last-child\n    margin-{opposite-side}: 0\n\n/**\n * Center an element on either or both axes.\n * @requires A parent container with relative positioning.\n * @param {string} [direction=both] - Specify which axes to center the element on.\n */\nalign(direction = both)\n  position: absolute\n  transform-style: preserve-3d\n\n  if (direction == horizontal) or (direction == h)\n    left: 50%\n    transform: translateX(-50%)\n  else if (direction == vertical) or (direction == v)\n    top: 50%\n    transform: translateY(-50%)\n  else\n    top: 50%\n    left: 50%\n    transform: translate(-50%, -50%)\n\n/**\n * Apply a clearfix to an element.\n */\ncf()\n  *zoom: 1\n\n  &:before, &:after\n    content: ''\n    display: table\n\n  &:after\n    clear: both\n"]}